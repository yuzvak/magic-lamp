const TgBot = require('node-telegram-bot-api'),
      token = "1180139988:AAHqK0UqszqI04eibuMAyXU_qXuHnTmTI0w",
      bot = new TgBot(token, {polling: true});

const Promise = require('bluebird');
const request = require('request');
const fs = require('fs');

const db = require('./db_tg.json')

Promise.config({
  cancellation: true
});

const add_user = [];

//delete after release
const test_mode_users = [];
let temp_lamp = "off";

bot.onText(/\/–ø–æ–≤—Ç–æ—Ä–∏ (.+)/, function (msg, match) {
    bot.sendMessage(msg.from.id, match[1]);
});

//–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–æ—á–∞—Ç–æ–∫
bot.onText(/\/start/, function (msg, match) {
    if(add_user.indexOf(msg.from.id) > -1) {
        bot.sendMessage(msg.from.id, 
                "–ï–µ–µ –Ω—ñ. –¶–µ –Ω–µ –∫–æ–¥ –ª–∞–º–ø–∏."
                +"\n\n–Ø–∫—â–æ —Ç–∏ –ø–µ—Ä–µ–¥—É–º–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –ª–∞–º–ø—É - –Ω–∞–ø–∏—à–∏ ¬´cancel¬ª");
        return;
    }
    bot.sendMessage(msg.from.id, 
                    "–ü—Ä–∏–≤—ñ—Ç, —è - –±–æ—Ç –≤—ñ–¥ Y-Tech.\n"
                    +"–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –≤ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—ñ —Ç–≤–æ—î—é –ª–∞–º–ø–æ—é, –ø–æ—ó—Ö–∞–ª–∏?", {
        reply_markup: JSON.stringify({
            one_time_keyboard: true,
            inline_keyboard: [
                [{text: "–í–ø–µ—Ä–µ–¥!", callback_data: 'go'}],
            ]
        })
    });
});

bot.onText(/\/menu/, function (msg, match) {
    if(getAuth(msg.from.id) === false) return;
    bot.sendMessage(msg.from.id, "–ú–µ–Ω—é –∫–µ—Ä—É–≤–∞–Ω–Ω—è –í–∞—à–æ—é –ª–∞–º–ø–æ—é\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥—ñ—é",{
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–ª—ñ—Ä", callback_data: 'set_color'},{text: "–ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", callback_data: 'set_brightness'}],
                        (getLampStatus(msg.from.id) === 'off' ? ([{text: "–í–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_on'}]):([{text: "–í–≤–∏–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_off'}]) )
                    ]
                })
            }) 
});

bot.on('message', function (msg) {
    if(add_user.indexOf(msg.from.id) > -1) {
        if(msg.text.length !== 6 || msg.text.indexOf('/') > -1) {
            bot.sendMessage(msg.from.id, 
                            "–ï–µ–µ –Ω—ñ. –¶–µ –Ω–µ –∫–æ–¥ –ª–∞–º–ø–∏."
                           +"\n\n–Ø–∫—â–æ —Ç–∏ –ø–µ—Ä–µ–¥—É–º–∞–≤ –¥–æ–¥–∞–≤–∞—Ç–∏ –ª–∞–º–ø—É - –Ω–∞–ø–∏—à–∏ ¬´cancel¬ª");
            return;
        }
        if(msg.text.toLowerCase() === 'cancel') {
            bot.sendMessage(msg.from.id, 
                            "–ë–µ–∑ –ª–∞–º–ø–∏ —Ç–∏ –Ω–µ –∑–º–æ–∂–µ—à –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—å –±–æ—Ç–æ–º üòû");
            for(let i in add_user){
                if(add_user[i] === msg.from.id) {
                    add_user.splice(i, 1)
                }
            }
        }
        request.get('http://localhost:8080/api/telegram/connect?from='+msg.from.id+'&code='+msg.text, (e,r,b) => {
            let data = JSON.parse(b);
            if(!data) {
                bot.sendMessage(msg.from.id, "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞.");
                return;
            }
            if(data.success === false) {
                bot.sendMessage(msg.from.id, "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. ("+data.error+" [for dev])");
            }
            else if(data.success === true) {
                db[msg.from.id] = data.id;
                bot.sendMessage(msg.from.id, "–í–∏ –ø—Ä–∏–≤'—è–∑–∞–ª–∏ –ª–∞–º–ø—É #"+data.id);
                bot.sendMessage(msg.from.id, 
                                "–í–∏ –ø—Ä–∏–≤'—è–∑–∞–ª–∏ –ª–∞–º–ø—É #"+data.id, {
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{text: "–ú–µ–Ω—é", callback_data: 'menu'}],
                        ]
                    })
                });
                for(let i in add_user){
                    if(add_user[i] === msg.from.id) {
                        add_user.splice(i, 1)
                    }
                }
            }
        })
        return;
    }
    if(msg.text.indexOf('/') === -1){
        bot.sendPhoto(msg.chat.id, __dirname+'/kavo.png', { caption: '–ö–∞–≤–æ?' });
        return;
    }
});

bot.on('callback_query', async function (msg) {
    switch(msg.data) {
        case 'go': {
            bot.sendMessage(msg.from.id, 
                            "–û–∫–µ–π! –î–∞–≤–∞–π –¥–æ–¥–∞–º–æ —Ç–≤–æ—é –ª–∞–º–ø—É!\n", {
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–î–æ–¥–∞—Ç–∏ –ª–∞–º–ø—É", callback_data: 'add'}],
                        [{text: "skip (for dev)", callback_data: 'skip'}],
                    ]
                })
            });
            break;
        }
        case 'add': {
            if(db[msg.from.id]) {
                bot.sendMessage(msg.from.id, 
                                "–£ –í–∞—Å –≤–∂–µ —î –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –ª–∞–º–ø–∞.", {
                    reply_markup: JSON.stringify({
                        inline_keyboard: [
                            [{text: "–ú–µ–Ω—é", callback_data: 'menu'}]
                        ]
                    })
                });
                for(i in add_user){
                    if(add_user[i] === msg.from.id) {
                        add_user.splice(i, 1)
                    }
                }
                return;
            }
            bot.sendMessage(msg.from.id,
                           "–í–≤–µ–¥–∏ –∫–æ–¥ –ª–∞–º–ø–∏, —è–∫–∏–π –≤–∫–∞–∑–∞–Ω–∏–π –≤ —Ç–≤–æ—î–º—É –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ"
                            + "\n\n–Ø–∫—â–æ —Ç–∏ –ø–µ—Ä–µ–¥—É–º–∞–≤ - –Ω–∞–ø–∏—à–∏ ¬´cancel¬ª"
                           );
            add_user.push(msg.from.id);
            break;
        }
        case 'skip': {
             bot.sendMessage(msg.from.id,
                           "–í–∏ –≤–≤—ñ–π—à–ª–∏ –≤ —Ä–µ–∂–∏–º —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞."
                            + "\n–í—ñ–Ω –¥–æ—Å—Ç—É–ø–Ω–∏–π —Ç—ñ–ª—å–∫–∏ –¥–æ —Ä–µ–ª—ñ–∑—É –ª–∞–º–ø–∏."
                           );
             test_mode_users.push(msg.from.id);
            break;
        }
        case 'lamp_on': {
            if(getAuth(msg.from.id) === false) return;
            request.get('http://localhost:8080/api/telegram/edit?id='+db[msg.from.id]+'&from='+msg.from.id+'&key=status&value=on', (e,r,b) => {
                if(!b) return;
                let data = JSON.parse(b);
                if(!data) {
                    bot.sendMessage(msg.from.id, "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. (#0 [for dev])");
                    return;
                }
                if(data.success === false) {
                    bot.sendMessage(msg.from.id, "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. ("+data.error+" [for dev])");
                }
                else if(data.success === true) {
                    bot.sendMessage(msg.from.id, "–õ–∞–º–ø–∞ –≤–≤—ñ–º–∫–Ω–µ–Ω–∞.\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥—ñ—é",{
                        reply_markup: JSON.stringify({
                            inline_keyboard: [
                                [{text: "–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–ª—ñ—Ä", callback_data: 'set_color'},{text: "–ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", callback_data: 'set_brightness'}],
                                (getLampStatus(msg.from.id) === 'off' ? ([{text: "–í–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_on'}]):([{text: "–í–≤–∏–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_off'}]) )
                            ]
                        })
                    })
                }
            })
            break;
        }
        case 'lamp_off': {
            if(getAuth(msg.from.id) === false) return;
            request.get('http://localhost:8080/api/telegram/edit?id='+db[msg.from.id]+'&from='+msg.from.id+'&key=status&value=off', (e,r,b) => {
                if(!b) return;
                let data = JSON.parse(b);
                if(!data) {
                    bot.sendMessage(msg.from.id, "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. (#0 [for dev])");
                    return;
                }
                if(data.success === false) {
                    bot.sendMessage(msg.from.id, "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. ("+data.error+" [for dev])");
                }
                else if(data.success === true) {
                    bot.sendMessage(msg.from.id, "–õ–∞–º–ø–∞ –≤–≤–∏–º–∫–Ω–µ–Ω–∞.\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥—ñ—é",{
                        reply_markup: JSON.stringify({
                            inline_keyboard: [
                                [{text: "–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–ª—ñ—Ä", callback_data: 'set_color'},{text: "–ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", callback_data: 'set_brightness'}],
                                (getLampStatus(msg.from.id) === 'off' ? ([{text: "–í–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_on'}]):([{text: "–í–≤–∏–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_off'}]) )
                            ]
                        })
                    })
                }
            })
            break;
        }
        case 'menu': {
            if(getAuth(msg.from.id) === false) return;
            bot.sendMessage(msg.from.id, "–ú–µ–Ω—é\n\n–í–∏–±–µ—Ä—ñ—Ç—å –±–∞–∂–∞–Ω—É –¥—ñ—é",{
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–ª—ñ—Ä", callback_data: 'set_color'},{text: "–ó–º—ñ–Ω–∏—Ç–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", callback_data: 'set_brightness'}],
                        (temp_lamp === 'off' ? ([{text: "–í–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_on'}]):([{text: "–í–≤–∏–º–∫–Ω—É—Ç–∏ –ª–∞–º–ø—É", callback_data: 'lamp_off'}]) )
                    ]
                })
            }) 
            break;
        }
        case 'set_color': {
            if(getAuth(msg.from.id) === false) return;
            bot.sendMessage(msg.from.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä",{
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–ë—ñ–ª–∏–π", callback_data: 'set_color_white'},{text: "–ß–µ—Ä–≤–æ–Ω–∏–π", callback_data: 'set_color_red'},{text: "–ó–µ–ª–µ–Ω–∏–π", callback_data: 'set_color_green'}],
                        [{text: "–ñ–æ–≤—Ç–∏–π", callback_data: 'set_color_yellow'},{text: "–°–∏–Ω—ñ–π", callback_data: 'set_color_blue'},{text: "–û—Ä–∞–Ω–∂–µ–≤–∏–π", callback_data: 'set_color_orange'}],
                        [{text: "–ï—Ñ–µ–∫—Ç ¬´Fade¬ª", callback_data: 'set_color_fade'},{text: "–ï—Ñ–µ–∫—Ç ¬´Gradient¬ª", callback_data: 'set_color_gradient'}],
                        [{text: "–ú–µ–Ω—é", callback_data: 'menu'}]
                    ]
                })
            }) 
            break;
        }
        case 'set_brightness': {
            if(getAuth(msg.from.id) === false) return;
            bot.sendMessage(msg.from.id, "–í–∏–±–µ—Ä—ñ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—É —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å:",{
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "0%", callback_data: 'set_brightness_0'}],
                        [{text: "10%", callback_data: 'set_brightness_10'},{text: "20%", callback_data: 'set_brightness_20'},{text: "30%", callback_data: 'set_brightness_30'}],
                        [{text: "40%", callback_data: 'set_brightness_40'},{text: "50%", callback_data: 'set_brightness_50'},{text: "60%", callback_data: 'set_brightness_60'}],
                        [{text: "70%", callback_data: 'set_brightness_70'},{text: "80%", callback_data: 'set_brightness_80'},{text: "90%", callback_data: 'set_brightness_90'}],
                        [{text: "100%", callback_data: 'set_brightness_100'}],
                        [{text: "–ú–µ–Ω—é", callback_data: 'menu'}]
                    ]
                })
            }) 
            break;
        }
        default: {
            if(msg.data.search('set_brightness_') > -1) {
                if(getAuth(msg.from.id) === false) return;
                let value = msg.data.match(/set\_brightness\_([^]+)/)[1];
                request.get('http://localhost:8080/api/telegram/edit?id='+db[msg.from.id]+'&from='+msg.from.id+'&key=brightness&value='+value, (e,r,b) => {
                    if(!b) return;
                    let data = JSON.parse(b);
                    if(!data) {
                        bot.sendMessage(msg.from.id, "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. (#0 [for dev])");
                        return;
                    }
                    if(data.success === false) {
                        bot.sendMessage(msg.from.id, "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. ("+data.error+" [for dev])");
                    }
                    else if(data.success === true) {
                        bot.sendMessage(msg.from.id, "–í–∏ –≤–∏–±—Ä–∞–ª–∏ —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å "+value+"%")
                    }
                })
                return;
            }
            if(msg.data.search('set_color_') > -1) {
                if(getAuth(msg.from.id) === false) return;
                let value = msg.data.match(/set\_color\_([^]+)/)[1];
                request.get('http://localhost:8080/api/telegram/edit?id='+db[msg.from.id]+'&from='+msg.from.id+'&key=color&value='+value, (e,r,b) => {
                    if(!b) return;
                    let data = JSON.parse(b);
                    if(!data) {
                        bot.sendMessage(msg.from.id, "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. (#0 [for dev])");
                        return;
                    }
                    if(!data.success) {
                        bot.sendMessage(msg.from.id, "–ù–µ–ø–µ—Ä–µ–¥–±–∞—á—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. ("+data.error+" [for dev])");
                    }
                    else if(data.success) {
                        bot.sendMessage(msg.from.id, "–í–∏ –≤–∏–±—Ä–∞–ª–∏ –∫–æ–ª—ñ—Ä: "+value+"")
                        return;
                    }  
                })
                return;
            }
            bot.sendMessage(msg.from.id, "–í —Ä–æ–∑—Ä–æ–±—Ü—ñ.");
            break;
        }
    }
});

const getLampStatus = (user) => {
    let status = null;
    request.get('http://localhost:8080/api/telegram/getLampStatus?id='+db[user]+'&from='+user, (e,r,b) => {
        console.log(b)
        if(!b) return;
        let data = JSON.parse(b);
        if(!data) {
            return null;
        }
        if(data.success === false) {
            return null;
        }
        else if(data.success === true) {
            status = data.value;
        }
    })
    return status;
}

const getAuth = (user) => {
    let status = true;
    if(!db[user]){
        bot.sendMessage(user, "–í–∏ –Ω–µ –¥–æ–¥–∞–ª–∏ –ª–∞–º–ø—É!\n–ù–∞—Ç–∏—Å–Ω—ñ—Å—Ç—å –∫–Ω–æ–ø–∫—É ¬´–¥–æ–¥–∞—Ç–∏ –ª–∞–º–ø—É¬ª, —â–æ–± –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞—Ç–∏—Å—å", {
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{text: "–î–æ–¥–∞—Ç–∏ –ª–∞–º–ø—É", callback_data: 'add'}]
                    ]
                })
            });
        status = false;
    }
    return status;
}

setInterval(() => {
    fs.writeFileSync(__dirname+"/db_tg.json", JSON.stringify(db, null, "\t"));
}, 10000)

/*
``````````{\
````````{\{*\
````````{*\~\__&&&
```````{```\`&&&&&&.
``````{~`*`\((((((^^^)
`````{`*`~((((((( ‚ôõ ‚ôõ
````{`*`~`)))))))). _' )
````{*```*`((((((('\ ~
`````{~`*``*)))))`.&
``````{.*~``*((((`\`\)) ?
````````{``~* ))) `\_.-'``
``````````{.__ ((`-*.*
````````````.*```~``*.
``````````.*.``*```~`*.
`````````.*````.````.`*.
````````.*``~`````*````*.
```````.*``````*`````~``*.
`````.*````~``````.`````*.
```.*```*```.``~```*``~ *.¬§¬¥“â .
*/
